version: "3"

networks:
  backend-bridged-network:
    driver: bridge

volumes:
  buy_project_app:
  buy_project_tmplwrkr:
  notify:
  payments:
  project_police_app:
  project_police_tmplwrkr:
  projects:
  scheduler:
  scheduler_supervisor:
  search:
  users:
  rabbitmq_data:
  mongo_data:
  postgres_data:
  search_data:
  temporal_data:
  prometheus_data:
  grafana_data:

services:
  buy_project_app:
    container_name: buy_project_app
    image: esdg9t1/buy_project-app:latest
    restart: unless-stopped
    volumes:
      - buy_project_app:/app
    networks:
      - backend-bridged-network
    depends_on:
      - buy_project_tmplwrkr
    environment:
      rmqhostname: ${RABBITMQ_HOSTNAME}
      rmqusername: ${RABBITMQ_USERNAME}
      rmqpassword: ${RABBITMQ_PASSWORD}
      rmqport: ${RABBITMQ_PORT}
      projectms: ${PROJECTS_BASE_URL}
      paymentms: ${PAYMENTS_BASE_URL}
      userms: ${USERS_BASE_URL}
      temporalservice: ${TEMPORAL_SERVER_BASE_URL}

  buy_project_tmplwrkr:
    container_name: buy_project_tmplwrkr
    image: esdg9t1/buy_project-tmplwrkr:latest
    restart: unless-stopped
    volumes:
      - buy_project_tmplwrkr:/app
    networks:
      - backend-bridged-network
    depends_on:
      - rabbitmq
      - users
      - projects
      - payments
      - temporal_server
    environment:
      rmqhostname: ${RABBITMQ_HOSTNAME}
      rmqport: ${RABBITMQ_PORT}
      rmqusername: ${RABBITMQ_USERNAME}
      rmqpassword: ${RABBITMQ_PASSWORD}
      projectms: ${PROJECTS_BASE_URL}
      paymentms: ${PAYMENTS_BASE_URL}
      userms: ${USERS_BASE_URL}
      temporalservice: ${TEMPORAL_SERVER_BASE_URL}

  notify:
    container_name: notify
    image: esdg9t1/notify:latest
    restart: unless-stopped
    volumes:
      - notify:/app
    networks:
      - backend-bridged-network
    depends_on:
      - rabbitmq
      - users
    environment:
      RABBITMQ_HOSTNAME: ${RABBITMQ_HOSTNAME}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      EXCHANGE: topic_exchange
      EXCHANGE_TYPE: topic
      USERS_BASE_URL: ${USERS_BASE_URL}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SENDGRID_FROM_EMAIL: ${SENDGRID_FROM_EMAIL}

  payments:
    container_name: payments
    image: esdg9t1/payments:latest
    restart: unless-stopped
    volumes:
      - payments:/app
    networks:
      - backend-bridged-network
    depends_on:
      - mongodb
    environment:
      # DB CONFIG (MONGO)
      MONGO_ROOT_USER: ${MONGO_ROOT_USER}
      MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      DB_CONN_STRING: "mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017"
      DB_NAME: payment
      COLLECTION_NAME: payment_intents
      # STRIPE CONFIG
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}

  project_police_app:
    container_name: project_police_app
    image: esdg9t1/project_police-app:latest
    restart: unless-stopped
    volumes:
      - project_police_app:/app
    networks:
      - backend-bridged-network
    depends_on:
      - project_police_tmplwrkr
    environment:
      rmqhostname: ${RABBITMQ_HOSTNAME}
      rmqport: ${RABBITMQ_PORT}
      rmqusername: ${RABBITMQ_USERNAME}
      rmqpassword: ${RABBITMQ_PASSWORD}
      projectms: ${PROJECTS_BASE_URL}
      paymentms: ${PAYMENTS_BASE_URL}
      userms: ${USERS_BASE_URL}
      temporalservice: ${TEMPORAL_SERVER_BASE_URL}

  project_police_tmplwrkr:
    container_name: project_police_tmplwrkr
    image: esdg9t1/project_police-tmplwrkr:latest
    # build:
    #   context: ./src/project_police
    #   dockerfile: temporal_worker.Dockerfile
    restart: unless-stopped
    volumes:
      - project_police_tmplwrkr:/app
    networks:
      - backend-bridged-network
    depends_on:
      - rabbitmq
      - users
      - projects
      - temporal_server
    environment:
      rmqhostname: ${RABBITMQ_HOSTNAME}
      rmqport: ${RABBITMQ_PORT}
      rmqusername: ${RABBITMQ_USERNAME}
      rmqpassword: ${RABBITMQ_PASSWORD}
      projectms: ${PROJECTS_BASE_URL}
      paymentms: ${PAYMENTS_BASE_URL}
      userms: ${USERS_BASE_URL}
      temporalservice: ${TEMPORAL_SERVER_BASE_URL}

  projects:
    container_name: projects
    image: esdg9t1/projects:latest
    restart: unless-stopped
    volumes:
      - projects:/app
    networks:
      - backend-bridged-network
    depends_on:
      - postgres
      - rabbitmq
    environment:
      POSTGRES_HOSTNAME: postgres # this should be the container name of the db service
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: projects

      RABBITMQ_HOSTNAME: ${RABBITMQ_HOSTNAME}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}

  scheduler:
    container_name: scheduler
    image: esdg9t1/scheduler:latest
    restart: unless-stopped
    volumes:
      - scheduler:/app
    networks:
      - backend-bridged-network
    depends_on:
      - rabbitmq
    environment:
      rmqhostname: ${RABBITMQ_HOSTNAME}
      rmqport: ${RABBITMQ_PORT}
      rmqusername: ${RABBITMQ_USERNAME}
      rmqpassword: ${RABBITMQ_PASSWORD}

  scheduler_supervisor:
    container_name: scheduler_supervisor
    image: esdg9t1/scheduler_supervisor:latest
    restart: unless-stopped
    volumes:
      - scheduler_supervisor:/app
    networks:
      - backend-bridged-network
    depends_on:
      - rabbitmq
    environment:
      rmqhostname: ${RABBITMQ_HOSTNAME}
      rmqport: ${RABBITMQ_PORT}
      rmqusername: ${RABBITMQ_USERNAME}
      rmqpassword: ${RABBITMQ_PASSWORD}

  search:
    container_name: search
    image: esdg9t1/search:latest
    restart: unless-stopped
    volumes:
      - search:/app
    networks:
      - backend-bridged-network
    depends_on:
      - postgres
      - meili
      - rabbitmq
    environment:
      rmqhostname: ${RABBITMQ_HOSTNAME}
      rmqport: ${RABBITMQ_PORT}
      rmqusername: ${RABBITMQ_USERNAME}
      rmqpassword: ${RABBITMQ_PASSWORD}
      MEILI: ${MEILI_BASE_URL}
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}

  users:
    container_name: users
    image: esdg9t1/users:latest
    restart: unless-stopped
    volumes:
      - users:/app
    networks:
      - backend-bridged-network
    depends_on:
      - postgres
    environment:
      POSTGRES_HOSTNAME: postgres # this should be the container name of the db service
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: users

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - ${RABBITMQ_PORT}:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./deployment/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./deployment/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - backend-bridged-network

  postgres:
    container_name: postgres
    image: postgres:13.3
    restart: unless-stopped
    volumes:
      - ./deployment/.docker/create_multiple_db.sh:/docker-entrypoint-initdb.d/create_multiple_db.sh:ro
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-bridged-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      POSTGRES_MULTIPLE_DATABASES: users,projects

  mongodb:
    container_name: mongodb
    image: mongo
    restart: unless-stopped
    networks:
      - backend-bridged-network
    volumes:
      - mongo_data:/data/db
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: payment

  meili:
    image: getmeili/meilisearch
    container_name: meili_search
    restart: unless-stopped
    ports:
      - 17700:7700
    volumes:
      - search_data:/data.ms
    networks:
      - backend-bridged-network
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}

  temporal_server:
    image: esdg9t1/temporal_server:latest
    container_name: temporal_server
    restart: unless-stopped
    ports:
      - 7233:7233
    volumes:
      - temporal_data:/temporal
    networks:
      - backend-bridged-network

  kong:
    image: kong:3.2.2-alpine
    hostname: kong
    container_name: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yaml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    networks:
      - backend-bridged-network
    ports:
      - 8000:8000
      - 8443:8443
      - 127.0.0.1:8001:8001
      - 127.0.0.1:8444:8444
    command: "kong start --vv"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    volumes:
      - ./deployment/kong/config:/kong/declarative

  konga:
    image: pantsel/konga:latest
    container_name: konga
    environment:
      - NODE_ENV=production
      - TOKEN_SECRET=my_token_secret
    ports:
      - 1337:1337
    networks:
      - backend-bridged-network

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.36.2
    volumes:
      - ./deployment/monitoring/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
      # - pushgateway:pushgateway
    depends_on:
      - cadvisor
      # - pushgateway
    networks:
      - backend-bridged-network
    restart: always
    # deploy:
    #   placement:
    #     constraints:
    #       - node.hostname == ${HOSTNAME}

  node-exporter:
    container_name: node-exporter
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - "--path.rootfs=/host"
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - backend-bridged-network
    restart: always
    deploy:
      mode: global

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./deployment/monitoring/alertmanager/:/etc/alertmanager/
    networks:
      - backend-bridged-network
    restart: always
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    # deploy:
    #   placement:
    #     constraints:
    #       - node.hostname == ${HOSTNAME}
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8081:8080
    networks:
      - backend-bridged-network
    restart: always
    deploy:
      mode: global

  grafana:
    container_name: grafana
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3001:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./deployment/monitoring/grafana/config.monitoring
    networks:
      - backend-bridged-network
    restart: always
